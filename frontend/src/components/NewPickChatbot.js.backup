import React, { useState, useEffect, useRef } from 'react';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import {
  FiMessageCircle,
  FiX,
  FiSend,
  FiMinimize2,
  FiMaximize2,
  FiTrash2,
  FiRefreshCw,
  FiHelpCircle,
  FiArrowRight,
  FiExternalLink,
  FiMessageSquare
} from 'react-icons/fi';
import pickChatbotApi from '../services/pickChatbotApi';

const ChatbotContainer = styled(motion.div)`
  position: fixed;
  bottom: 80px;
  height: 85%;
  right: 25px;
  z-index: 1000;
  display: flex;
  flex-direction: column;
  align-items: flex-end;
`;

// 배경 오버레이 추가
const BackgroundOverlay = styled(motion.div)`
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.1);
  z-index: 999;
  cursor: pointer;
`;

const ChatWindow = styled(motion.div)`
  width: 400px;
  height: 100%;
  background: white;
  border-radius: 20px;
  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
  display: flex;
  flex-direction: column;
  overflow: hidden;
  margin-bottom: 15px;

  @media (max-width: 480px) {
    width: 350px;
    height: 500px;
  }
`;

const ChatHeader = styled.div`
  background: linear-gradient(135deg, #2dd4bf 0%, #38bdf8 60%, #60a5fa 100%);
  color: #ffffff;
  padding: 20px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  position: relative;
`;

const HeaderInfo = styled.div`
  display: flex;
  align-items: center;
  gap: 12px;
`;

const AgentIcon = styled.div`
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.18);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 18px;
`;

const HeaderText = styled.div`
  h3 {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
  }
  p {
    margin: 0;
    font-size: 12px;
    opacity: 0.8;
  }
`;

const HeaderActions = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
`;

const IconButton = styled.button`
  background: none;
  border: none;
  color: #ffffff;
  padding: 6px;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background 0.2s ease;

  &:hover {
    background: rgba(255, 255, 255, 0.22);
  }
`;

const ChatBody = styled.div`
  flex: 1;
  padding: 20px;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
  gap: 16px;
`;

const MessageContainer = styled.div`
  display: flex;
  justify-content: ${props => props.$isUser ? 'flex-end' : 'flex-start'};
  margin-bottom: 8px;
`;

const Message = styled(motion.div)`
  max-width: 80%;
  padding: 12px 16px;
  border-radius: 18px;
  font-size: 14px;
  line-height: 1.4;
  word-wrap: break-word;
  white-space: pre-wrap;
  overflow-wrap: anywhere;

  ${props => props.$isUser ? `
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-bottom-right-radius: 4px;
  ` : `
    background: #f8f9fa;
    color: #333;
    border-bottom-left-radius: 4px;
  `}
`;

const SuggestionsContainer = styled.div`
  margin-top: 12px;
  display: flex;
  flex-direction: column;
  gap: 8px;
`;

const SuggestionButton = styled.button`
  background: #f0f9ff;
  border: 1px solid #0ea5e9;
  color: #0ea5e9;
  padding: 8px 12px;
  border-radius: 8px;
  font-size: 12px;
  cursor: pointer;
  transition: all 0.2s ease;
  text-align: left;

  &:hover {
    background: #0ea5e9;
    color: white;
  }
`;

const QuickActionsContainer = styled.div`
  margin-top: 12px;
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
`;

const QuickActionButton = styled.button`
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border: none;
  color: white;
  padding: 8px 12px;
  border-radius: 8px;
  font-size: 12px;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  gap: 4px;

  &:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
  }
`;

const ChatInput = styled.div`
  padding: 20px;
  border-top: 1px solid #eee;
  display: flex;
  align-items: center;
  gap: 12px;
`;

const Input = styled.input`
  flex: 1;
  padding: 12px 16px;
  border: 2px solid #eee;
  border-radius: 25px;
  font-size: 14px;
  outline: none;
  transition: border-color 0.2s ease;

  &:focus {
    border-color: #667eea;
  }
`;

const SendButton = styled.button`
  width: 50px;
  height: 50px;
  border-radius: 50%;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border: none;
  color: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: visible;
  transition: transform 0.2s ease;

  &:hover {
    transform: scale(1.1);
  }

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }
`;

const LoadingDots = styled.div`
  display: flex;
  gap: 4px;
  padding: 12px 16px;
  background: #f8f9fa;
  border-radius: 18px;
  border-bottom-left-radius: 4px;
  width: fit-content;
`;

const Dot = styled(motion.div)`
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: #667eea;
`;

const WelcomeMessage = styled.div`
  text-align: center;
  padding: 20px;
  color: #666;
  font-size: 14px;
  line-height: 1.5;
`;

const PageActionContainer = styled.div`
  margin-top: 12px;
  padding: 12px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border-radius: 12px;
  color: white;
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 12px;
`;

const PageActionMessage = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 14px;
  font-weight: 500;

  span {
    font-size: 16px;
  }
`;

const PageActionButton = styled.button`
  padding: 6px 12px;
  background: rgba(255, 255, 255, 0.2);
  border: 1px solid rgba(255, 255, 255, 0.3);
  border-radius: 6px;
  color: white;
  font-size: 12px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;

  &:hover {
    background: rgba(255, 255, 255, 0.3);
    border-color: rgba(255, 255, 255, 0.5);
  }
`;

const FloatingButton = styled(motion.button)`
  position: fixed;
  bottom: 80px;
  right: 25px;
  width: 60px;
  height: 60px;
  border-radius: 50%;
  background: linear-gradient(135deg, #2dd4bf 0%, #38bdf8 60%, #60a5fa 100%);
  border: none;
  color: white;
  font-size: 24px;
  cursor: pointer;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  transition: all 0.3s ease;

  &:hover {
    transform: scale(1.1);
    box-shadow: 0 6px 25px rgba(0, 0, 0, 0.2);
  }
`;

const NewPickChatbot = ({ isOpen, onOpenChange }) => {
  // sessionStorage에서 상태 복원
  const getInitialMessages = () => {
    const savedMessages = sessionStorage.getItem('pickChatbotMessages');
    if (savedMessages) {
      try {
        const parsed = JSON.parse(savedMessages);
        // timestamp를 Date 객체로 변환
        return parsed.map(msg => ({
          ...msg,
          timestamp: new Date(msg.timestamp)
        }));
      } catch (e) {
        console.log('저장된 메시지 파싱 실패, 기본 메시지 사용');
      }
    }

    return [
      {
        id: 1,
        text: "안녕하세요! AI 채용 관리 시스템의 픽톡입니다. 무엇을 도와드릴까요?",
        isUser: false,
        timestamp: new Date(),
        quickActions: [
          { title: "채용공고 등록", action: "navigate", target: "/job-posting", icon: "📝" },
          { title: "지원자 관리", action: "navigate", target: "/applicants", icon: "👥" },

          { title: "채용공고 조회", action: "chat", message: "채용공고 목록을 보여주세요", icon: "📋" },
          { title: "지원자 통계", action: "chat", message: "지원자 통계를 보여주세요", icon: "📊" },
          { title: "메일 발송", action: "chat", message: "메일 템플릿을 보여주세요", icon: "📧" }
        ]
      }
    ];
  };

  const [messages, setMessages] = useState(getInitialMessages);
  const [inputValue, setInputValue] = useState(sessionStorage.getItem('pickChatbotInput') || '');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);
  const inputRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  // 입력폼 포커스 함수
  const focusInput = () => {
    inputRef.current?.focus();
  };

  // sessionStorage에 상태 저장
  useEffect(() => {
    sessionStorage.setItem('pickChatbotMessages', JSON.stringify(messages));
  }, [messages]);

  useEffect(() => {
    sessionStorage.setItem('pickChatbotInput', inputValue);
  }, [inputValue]);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async (messageText = null) => {
    const startTime = Date.now();
    const textToSend = messageText || inputValue.trim();
    if (!textToSend || isLoading) return;

    console.group('🚀 [PICK-TALK FRONTEND] 메시지 전송 프로세스');
    console.log('📝 전송 메시지:', textToSend);
    console.log('⏰ 시작 시간:', new Date().toLocaleTimeString());
    console.log('🔢 메시지 길이:', textToSend.length);
    console.log('📊 현재 메시지 수:', messages.length);

    const userMessage = {
      id: Date.now(),
      text: textToSend,
      isUser: true,
      timestamp: new Date()
    };

    console.log('👤 사용자 메시지 객체:', userMessage);

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);

    console.log('🔄 UI 상태 업데이트 완료 (메시지 추가, 입력창 초기화, 로딩 시작)');

    try {
      const apiStartTime = Date.now();
      console.log('🌐 API 호출 시작...');

      // API 호출
      const response = await pickChatbotApi.chat(textToSend);
      const apiEndTime = Date.now();
      const apiDuration = apiEndTime - apiStartTime;

      console.log('✅ API 응답 수신 완료');
      console.log('⏱️ API 응답 시간:', `${apiDuration}ms`);
      console.log('📦 응답 데이터:', response);
      console.log('🎯 응답 타입:', typeof response);
      console.log('📏 응답 크기:', JSON.stringify(response).length, 'bytes');

      const botMessage = {
        id: Date.now() + 1,
        text: response.response,
        isUser: false,
        timestamp: new Date(),
        suggestions: response.suggestions || [],
        quickActions: response.quick_actions || [],
        pageAction: response.page_action || null
      };

      console.log('🔍 [DEBUG] 봇 메시지 생성:', botMessage);

      setMessages(prev => [...prev, botMessage]);

      // 페이지 액션이 있으면 자동 처리
      if (botMessage.pageAction) {
        console.log('🔍 [DEBUG] 페이지 액션 감지:', botMessage.pageAction);

        // 페이지 액션 우선순위 처리 (부드러운 애니메이션)
        const handlePageAction = () => {
          if (botMessage.pageAction.action === 'navigate') {
            // 새로운 페이지 네비게이션 처리 (스르륵 애니메이션)
            const pageAction = botMessage.pageAction;
            console.log('🎯 [페이지 네비게이션] 부드러운 이동 시작:', pageAction);

            // 자동 입력 데이터 저장 (페이지 이동 전에 미리)
            if (pageAction.auto_fill_data) {
              console.log('💾 [자동 입력] sessionStorage에 데이터 저장:', pageAction.auto_fill_data);
              sessionStorage.setItem('autoFillJobPostingData', JSON.stringify(pageAction.auto_fill_data));
            }

            // 챗창 상태를 유지하면서 페이지 이동
            sessionStorage.setItem('pickChatbotIsOpen', 'true');

            // 🎨 부드러운 페이지 전환 애니메이션
            console.log('✨ [부드러운 전환] 페이지 페이드아웃 시작');

            // 페이지 전체에 페이드아웃 효과 적용
            const fadeOverlay = document.createElement('div');
            fadeOverlay.style.cssText = `
              position: fixed;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              background: rgba(255, 255, 255, 0);
              z-index: 9999;
              transition: all 0.5s ease-in-out;
              pointer-events: none;
            `;
            document.body.appendChild(fadeOverlay);

            // 페이드아웃 애니메이션 실행
            setTimeout(() => {
              fadeOverlay.style.background = 'rgba(255, 255, 255, 0.9)';
              console.log('🌫️ [부드러운 전환] 페이드아웃 진행 중...');
            }, 50);

            // 페이드아웃 완료 후 페이지 이동
            setTimeout(() => {
              console.log('🚀 [부드러운 전환] 페이지 이동 실행');

              // React Router를 사용한 페이지 이동
              if (window.handlePageAction && pageAction.path) {
                console.log('🎯 [페이지 네비게이션] handlePageAction 호출:', `changePage:${pageAction.path.replace('/', '')}`);
                window.handlePageAction(`changePage:${pageAction.path.replace('/', '')}`);
              } else if (pageAction.path) {
                console.log('🎯 [페이지 네비게이션] fallback URL 변경:', pageAction.path);
                window.location.href = pageAction.path;
              } else {
                console.warn('🎯 [페이지 네비게이션] path가 없어서 이동할 수 없습니다:', pageAction);
              }

              // 페이드인 효과 (페이지 로드 후)
              setTimeout(() => {
                console.log('✨ [부드러운 전환] 페이드인 시작');
                fadeOverlay.style.background = 'rgba(255, 255, 255, 0)';

                // 애니메이션 완료 후 오버레이 제거
                setTimeout(() => {
                  if (fadeOverlay.parentNode) {
                    fadeOverlay.parentNode.removeChild(fadeOverlay);
                    console.log('🧹 [부드러운 전환] 오버레이 정리 완료');
                  }
                }, 500);
              }, 300);

            }, 500); // 0.5초 후 페이지 이동

          } else if (botMessage.pageAction.action === 'openAIJobRegistration') {
            // AI 채용공고 등록 페이지로 이동 (자동입력 데이터 포함)
            sessionStorage.setItem('pickChatbotIsOpen', 'true');

            // 자동입력 데이터가 있으면 URL 파라미터로 전달
            if (botMessage.pageAction.auto_fill_data) {
              const autoFillParam = encodeURIComponent(JSON.stringify(botMessage.pageAction.auto_fill_data));
              window.location.href = `/job-posting?autoFill=${autoFillParam}`;
            } else {
              window.location.href = '/job-posting';
            }
          }
        };

        // 페이지 액션이 있으면 사용자에게 부드러운 안내 (메시지 유무와 관계없이)
        if (botMessage.pageAction.message || botMessage.pageAction.action === 'navigate') {
          console.log('🎯 [페이지 이동] 조건 충족 - 자동 이동 시작');
          // 부드러운 페이지 이동 안내 메시지
          const actionMessage = botMessage.pageAction.message || "페이지로 이동합니다";
          const navigationMessage = {
            id: Date.now() + 2,
            text: `✨ ${actionMessage}\n\n🌟 **3초 후 자동으로 페이지 이동됩니다**`,
            isUser: false,
            timestamp: new Date(),
            isNavigationPrompt: true,
            pageAction: botMessage.pageAction,
            suggestions: [
              "🚀 지금 바로 이동하기"
            ],
            quickActions: [
              { title: "🚀 지금 이동", action: "navigate_smooth", target: botMessage.pageAction.path, icon: "🚀" }
            ]
          };

          setMessages(prev => [...prev, navigationMessage]);

          // 카운트다운 표시 (더 인터랙티브하게)
          let countdown = 3;
          const countdownInterval = setInterval(() => {
            if (countdown > 0) {
                            // 카운트다운 메시지 업데이트
              setMessages(prev => prev.map(msg =>
                msg.id === navigationMessage.id
                  ? { ...msg, text: `✨ ${actionMessage}\n\n🌟 **${countdown}초 후 자동으로 페이지 이동됩니다**` }
                  : msg
              ));
              countdown--;
            } else {
              clearInterval(countdownInterval);
              // 자동 이동 실행
              console.log('⏰ [자동 이동] 카운트다운 완료, 부드러운 페이지 이동 시작');
              handlePageAction();
            }
          }, 1000);
        } else {
          // 메시지가 없으면 바로 이동 (기존 로직)
          setTimeout(handlePageAction, 2000);
        }
      }
    } catch (error) {
      const errorTime = Date.now();
      const totalTime = errorTime - startTime;

      console.group('🚨 [PICK-TALK ERROR] API 오류 발생');
      console.error('❌ 에러 객체:', error);
      console.error('🔍 에러 타입:', error.constructor.name);
      console.error('📄 에러 메시지:', error.message);
      console.error('🌐 네트워크 상태:', navigator.onLine ? '온라인' : '오프라인');
      console.error('⏱️ 요청 처리 시간:', `${totalTime}ms`);
      console.error('📊 요청 정보:', {
        message: textToSend,
        messageLength: textToSend.length,
        timestamp: new Date().toISOString()
      });

      // 상세 에러 정보
      if (error.response) {
        console.error('📡 HTTP 응답 에러:');
        console.error('  - 상태 코드:', error.response.status);
        console.error('  - 상태 텍스트:', error.response.statusText);
        console.error('  - 응답 데이터:', error.response.data);
      } else if (error.request) {
        console.error('📡 네트워크 요청 에러:', error.request);
      }

      console.groupEnd();

      // 에러 타입별 사용자 친화적 메시지
      let errorText = "죄송합니다. 일시적인 오류가 발생했습니다.";
      let suggestions = ["다시 시도하기", "다른 질문하기"];

      if (!navigator.onLine) {
        errorText = "🌐 인터넷 연결을 확인해주세요. 네트워크가 불안정합니다.";
        suggestions = ["연결 확인 후 재시도", "나중에 다시 시도"];
      } else if (error.response?.status >= 500) {
        errorText = "🔧 서버에 일시적인 문제가 발생했습니다. 잠시 후 다시 시도해주세요.";
        suggestions = ["1분 후 재시도", "관리자에게 문의"];
      } else if (error.response?.status === 429) {
        errorText = "⏳ 너무 많은 요청이 발생했습니다. 잠시 후 다시 시도해주세요.";
        suggestions = ["30초 후 재시도", "다른 질문하기"];
      }

      const errorMessage = {
        id: Date.now() + 1,
        text: errorText,
        isUser: false,
        timestamp: new Date(),
        suggestions: suggestions,
        quickActions: [],
        isError: true
      };

      setMessages(prev => [...prev, errorMessage]);
    } finally {
      const finalTime = Date.now();
      const totalDuration = finalTime - startTime;

      setIsLoading(false);

      console.log('🏁 [PICK-TALK FRONTEND] 메시지 전송 프로세스 완료');
      console.log('⏱️ 전체 처리 시간:', `${totalDuration}ms`);
      console.log('📊 최종 메시지 수:', messages.length + 1); // +1은 방금 추가된 메시지
      console.log('🎯 로딩 상태 해제');
      console.groupEnd(); // 시작할 때 열었던 그룹 닫기

      // 메시지 전송 완료 후 입력폼에 자동 포커스
      setTimeout(() => {
        focusInput();
      }, 100);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleSuggestionClick = (suggestion) => {
    console.log('🎯 [SUGGESTION CLICK] 클릭된 제안:', suggestion);

    // 부드러운 페이지 이동 제안인지 확인
    if (suggestion === "🚀 지금 바로 이동하기" || suggestion === "페이지로 이동하기") {
      console.log('✨ [부드러운 이동] 사용자가 즉시 이동 선택');
      // 현재 메시지에서 페이지 액션 찾기
      const currentMessage = messages[messages.length - 1];
      if (currentMessage && currentMessage.isNavigationPrompt && currentMessage.pageAction) {
        const pageAction = currentMessage.pageAction;

        // 부드러운 페이지 전환 실행
        if (pageAction.action === 'navigate') {
          console.log('🌟 [즉시 이동] 부드러운 네비게이션 시작');

          // 자동 입력 데이터 저장
          if (pageAction.auto_fill_data) {
            sessionStorage.setItem('autoFillJobPostingData', JSON.stringify(pageAction.auto_fill_data));
          }
          sessionStorage.setItem('pickChatbotIsOpen', 'true');

          // 부드러운 페이드 애니메이션
          const fadeOverlay = document.createElement('div');
          fadeOverlay.style.cssText = `
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background: rgba(255, 255, 255, 0); z-index: 9999;
            transition: all 0.3s ease-in-out; pointer-events: none;
          `;
          document.body.appendChild(fadeOverlay);

          setTimeout(() => fadeOverlay.style.background = 'rgba(255, 255, 255, 0.9)', 50);
          setTimeout(() => {
            if (window.handlePageAction && pageAction.path) {
              window.handlePageAction(`changePage:${pageAction.path.replace('/', '')}`);
            } else {
              window.location.href = pageAction.path;
            }
          }, 300);

        } else if (pageAction.action === 'openAIJobRegistration') {
          sessionStorage.setItem('pickChatbotIsOpen', 'true');
          if (pageAction.auto_fill_data) {
            const autoFillParam = encodeURIComponent(JSON.stringify(pageAction.auto_fill_data));
            window.location.href = `/job-posting?autoFill=${autoFillParam}`;
          } else {
            window.location.href = '/job-posting';
          }
        }
        return;
      }


    // 기존 제안 처리 로직
    handleSendMessage(suggestion);
  };

        // 완전자율에이전트: 자동 액션 실행 함수
  const executeAutoActions = (pageAction) => {
    console.log('🤖 [완전자율에이전트] 자동 액션 실행:', pageAction);

    const { path, additional_data } = pageAction;

    // 페이지별 자동 액션 매핑
    const autoActions = {
      '/github-test': () => {
        if (additional_data?.username) {
          console.log('🤖 [완전자율에이전트] GitHub 분석 자동 실행:', additional_data.username);

          // 더 정확한 입력 필드 찾기
          const usernameInput = document.querySelector('input[placeholder*="GitHub"], input[name="username"], #username, input[type="text"]');
          if (usernameInput) {
            console.log('🤖 [완전자율에이전트] 사용자명 입력 필드 찾음:', usernameInput);
            usernameInput.value = additional_data.username;
            usernameInput.dispatchEvent(new Event('input', { bubbles: true }));
            usernameInput.dispatchEvent(new Event('change', { bubbles: true }));

            // 분석 버튼 찾기 및 클릭 (더 정확한 선택자)
            setTimeout(() => {
              const analyzeButton = document.querySelector('button[type="submit"], button:contains("분석"), button:contains("Analyze"), button:contains("Submit"), button:contains("확인")');
              if (analyzeButton) {
                console.log('🤖 [완전자율에이전트] 분석 버튼 자동 클릭:', analyzeButton);
                analyzeButton.click();
              } else {
                console.log('🤖 [완전자율에이전트] 분석 버튼을 찾을 수 없습니다. 모든 버튼:', document.querySelectorAll('button'));
                // 폼 제출 시도
                const form = document.querySelector('form');
                if (form) {
                  console.log('🤖 [완전자율에이전트] 폼 자동 제출');
                  form.submit();
                }
              }
            }, 1000);
          } else {
            console.log('🤖 [완전자율에이전트] 사용자명 입력 필드를 찾을 수 없습니다. 모든 입력 필드:', document.querySelectorAll('input'));
          }
        }
      },
      '/job-posting': () => {
        if (additional_data?.auto_fill_data) {
          console.log('🤖 [완전자율에이전트] 채용공고 자동 입력:', additional_data.auto_fill_data);
          // 채용공고 자동 입력 로직
        }
      }
    };

    // 해당 페이지의 자동 액션 실행
    if (autoActions[path]) {
      console.log('🤖 [완전자율에이전트] 페이지 액션 실행:', path);
      autoActions[path]();
    } else {
      console.log('🤖 [완전자율에이전트] 해당 페이지의 자동 액션이 정의되지 않음:', path);
    }
  };

  const handleQuickActionClick = (action) => {
    if (action.action === 'navigate') {
      // 챗창 상태를 유지하면서 페이지 이동
      sessionStorage.setItem('pickChatbotIsOpen', 'true');
      window.location.href = action.target;
    } else if (action.action === 'external') {
      // 외부 링크 열기
      window.open(action.target, '_blank');
    } else if (action.action === 'openAIJobRegistration') {
      // AI 채용공고 등록 페이지로 이동
      sessionStorage.setItem('pickChatbotIsOpen', 'true');

      // 자동입력 데이터가 있으면 URL 파라미터로 전달
      if (action.auto_fill_data) {
        const autoFillParam = encodeURIComponent(JSON.stringify(action.auto_fill_data));
        window.location.href = `/job-posting?autoFill=${autoFillParam}`;
      } else {
        window.location.href = '/job-posting';
      }
    }
  };

  // 🚀 새 format_response_text 함수
  const formatResponseText = (text) => {
    if (!text) return text;

    // 1️⃣ 이모지 리스트 (섹션 구분용)
    const EMOJIS = ["📋", "💡", "🎯", "🔍", "📊", "🤝", "💼", "📝", "🚀", "💻"];

    // 2️⃣ 숫자 항목 정규식 (숫자. 뒤에 한 칸만 남김)
    const NUM_LIST_RE = /\b(\d+)\.\s+/g;

    // 3️⃣ 이모지 찾기
    const EMOJI_RE = new RegExp('(' + EMOJIS.map(emoji => emoji.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')).join('|') + ')', 'g');

    // 0️⃣ 양쪽 공백 및 개행 정리
    let formattedText = text.trim();

    // 1️⃣ `**` 제거 (굵은 텍스트 표시가 필요 없으므로 없애줍니다)
    formattedText = formattedText.replace(/\*\*/g, '');

    // 2️⃣ 문장 끝(마침표·물음표·느낌표·한글 마침표) 뒤에 두 줄 빈 줄
    formattedText = formattedText.replace(/([.!?。])\s+/g, '$1\n\n');

    // 3️⃣ 불릿(•) 앞에 줄 바꿈
    formattedText = formattedText.replace(/• /g, '\n• ');

    // 4️⃣ 숫자 항목 1., 2. 앞에 줄 바꿈 **하지만** 번호 다음은 한 줄에 남김
    formattedText = formattedText.replace(NUM_LIST_RE, '$1. ');     // <-- 줄바꿈 대신 공백

    // 5️⃣ 이모지 앞에 두 줄 빈 줄
    formattedText = formattedText.replace(EMOJI_RE, '\n\n$1');

    // 6️⃣ 중복 빈 줄(3개 이상)을 2개로 정리
    formattedText = formattedText.replace(/\n{3,}/g, '\n\n');

    return formattedText;
  };



  // 강제 새로고침 감지 및 초기화 (수정)
  useEffect(() => {
    // 페이지 로드 시 강제 새로고침 감지
    const isHardRefresh = performance.navigation.type === 1 ||
                         (performance.getEntriesByType('navigation')[0] &&
                          performance.getEntriesByType('navigation')[0].type === 'reload');

    // Ctrl+F5 또는 F5로 강제 새로고침된 경우에만 초기화
    if (isHardRefresh) {
      console.log('🔍 강제 새로고침 감지됨 - 세션 초기화');
      sessionStorage.removeItem('pickChatbotMessages');
      sessionStorage.removeItem('pickChatbotInput');
      sessionStorage.removeItem('pickChatbotShouldReset');
      // 챗창 상태는 유지 (제거하지 않음)
      // sessionStorage.removeItem('pickChatbotIsOpen'); // 이 줄 제거

      // 컴포넌트 상태를 기본값으로 리셋
      const defaultMessage = {
        id: Date.now(),
        text: "안녕하세요! AI 채용 관리 시스템의 픽톡입니다. 무엇을 도와드릴까요?",
        isUser: false,
        timestamp: new Date(),
        quickActions: [
          { title: "채용공고 등록", action: "navigate", target: "/job-posting", icon: "📝" },
          { title: "지원자 관리", action: "navigate", target: "/applicants", icon: "👥" },

        ]
      };
      setMessages([defaultMessage]);
      setInputValue('');
    }

    // beforeunload 이벤트로 일반 새로고침 감지 (수정)
    const handleBeforeUnload = () => {
      // 챗창 상태는 유지하고 메시지만 리셋
      sessionStorage.setItem('pickChatbotShouldReset', 'true');
      // 챗창 상태는 그대로 유지
    };

    window.addEventListener('beforeunload', handleBeforeUnload);

    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, []);

  // 챗봇이 열릴 때 입력폼에 자동 포커스
  useEffect(() => {
    if (isOpen) {
      setTimeout(() => {
        focusInput();
      }, 300);
    }
  }, [isOpen]);

  const clearChat = () => {
    pickChatbotApi.resetSession();
    const defaultMessage = {
      id: Date.now(),
      text: "안녕하세요! AI 채용 관리 시스템의 픽톡입니다. 무엇을 도와드릴까요?",
      isUser: false,
      timestamp: new Date(),
      quickActions: [
        { title: "채용공고 등록", action: "navigate", target: "/job-posting", icon: "📝" },
        { title: "지원자 관리", action: "navigate", target: "/applicants", icon: "👥" }
      ]
    };
    setMessages([defaultMessage]);
    setInputValue('');
    // sessionStorage도 초기화 (챗창 상태는 유지)
    sessionStorage.removeItem('pickChatbotMessages');
    sessionStorage.removeItem('pickChatbotInput');
    // 챗창 상태는 그대로 유지
  };

  // 배경 클릭 핸들러 추가
  const handleBackgroundClick = (e) => {
    // 배경 오버레이 클릭 시에만 최소화
    if (e.target === e.currentTarget) {
      onOpenChange('floating');
      sessionStorage.setItem('pickChatbotIsOpen', 'floating');
    }
  };

  return (
    <>
      {/* 플로팅 버튼 - 항상 표시 */}
      <FloatingButton
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.3, ease: "easeOut" }}
        onClick={() => {
          onOpenChange(true);
          sessionStorage.setItem('pickChatbotIsOpen', 'true');
        }}
        title="픽톡 열기"
        style={{ display: isOpen === true ? 'none' : 'flex' }}
      >
        💬
      </FloatingButton>

      {/* 채팅창 상태 */}
      <AnimatePresence>
        {isOpen === true && (
          <>
            {/* 배경 오버레이 */}
            <BackgroundOverlay
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.2 }}
              onClick={handleBackgroundClick}
            />
            <ChatbotContainer
              initial={{ opacity: 0, scale: 0.8, y: 20 }}
              animate={{ opacity: 1, scale: 1, y: 0 }}
              exit={{ opacity: 0, scale: 0.8, y: 20 }}
              transition={{ duration: 0.3, ease: "easeOut" }}
            >
          <ChatWindow>
            <ChatHeader>
              <HeaderInfo>
                <AgentIcon>
                  💬
                </AgentIcon>
                <HeaderText>
                  <h3>픽톡</h3>
                  <p>AI 어시스턴트</p>
                </HeaderText>
              </HeaderInfo>
              <HeaderActions>
                <IconButton onClick={clearChat} title="대화 초기화">
                  <FiTrash2 size={16} />
                </IconButton>
                <IconButton onClick={() => {
                  // 플로팅 버튼 상태로 변경 (완전히 닫지 않고)
                  onOpenChange('floating');
                  sessionStorage.setItem('pickChatbotIsOpen', 'floating');
                }} title="최소화">
                  <FiMinimize2 size={18} />
                </IconButton>
              </HeaderActions>
            </ChatHeader>

            <ChatBody>
              {messages.map((message) => (
                <div key={message.id}>
                  <MessageContainer $isUser={message.isUser}>
                    <Message
                      $isUser={message.isUser}
                      initial={{ opacity: 0, y: 10 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.3 }}
                    >
                      {message.isUser ? message.text : formatResponseText(message.text)}
                    </Message>
                  </MessageContainer>

                  {/* 추천 질문 (최초 1회만 노출) */}
                  {!message.isUser && message.suggestions && message.suggestions.length > 0 && message.id === 1 && (
                    <SuggestionsContainer>
                      {message.suggestions.map((suggestion, index) => (
                        <SuggestionButton
                          key={index}
                          onClick={() => handleSuggestionClick(suggestion)}
                        >
                          {suggestion}
                        </SuggestionButton>
                      ))}
                    </SuggestionsContainer>
                  )}

                  {/* 빠른 액션 */}
                  {!message.isUser && message.quickActions && message.quickActions.length > 0 && (
                    <QuickActionsContainer>
                      {message.quickActions.map((action, index) => (
                        <QuickActionButton
                          key={index}
                          onClick={() => handleQuickActionClick(action)}
                        >
                          <span>{action.icon}</span>
                          {action.title}
                          <FiArrowRight size={12} />
                        </QuickActionButton>
                      ))}
                    </QuickActionsContainer>
                  )}


                </div>
              ))}

              {isLoading && (
                <MessageContainer $isUser={false}>
                  <LoadingDots>
                    <Dot
                      animate={{ scale: [1, 1.2, 1] }}
                      transition={{ duration: 0.6, repeat: Infinity, delay: 0 }}
                    />
                    <Dot
                      animate={{ scale: [1, 1.2, 1] }}
                      transition={{ duration: 0.6, repeat: Infinity, delay: 0.2 }}
                    />
                    <Dot
                      animate={{ scale: [1, 1.2, 1] }}
                      transition={{ duration: 0.6, repeat: Infinity, delay: 0.4 }}
                    />
                  </LoadingDots>
                </MessageContainer>
              )}
              <div ref={messagesEndRef} />
            </ChatBody>

            <ChatInput>
              <Input
                ref={inputRef}
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="메시지를 입력하세요..."
                disabled={isLoading}
              />
              <SendButton
                onClick={() => handleSendMessage()}
                disabled={!inputValue.trim() || isLoading}
              >
                <FiSend size={18} />
              </SendButton>
            </ChatInput>
          </ChatWindow>
        </ChatbotContainer>
            </>
        )}
      </AnimatePresence>
    </>
  );
};

export default NewPickChatbot;
